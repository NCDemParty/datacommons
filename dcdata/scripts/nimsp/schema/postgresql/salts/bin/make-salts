#!/usr/bin/env python

import MySQLdb
import psycopg2
import psycopg2.extensions
import random
import sys

from optparse import OptionParser
from django.conf import settings

DEFAULT_N = 2500

usage = "usage: %prog "

parser = OptionParser(usage=usage)

parser.add_option("-n", "--number", dest="n", type="int", metavar='INTEGER', default=DEFAULT_N,
                  help="number of salts to create")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                  help="verbose output")
(options, args) = parser.parse_args()

try:
    nimsp_con = MySQLdb.connect(
        db=settings.OTHER_DATABASES['nimsp']['DATABASE_NAME'],
        user=settings.OTHER_DATABASES['nimsp']['DATABASE_USER'],
        host=settings.OTHER_DATABASES['nimsp']['DATABASE_HOST'] if 'DATABASE_HOST' in settings.OTHER_DATABASES['nimsp'] else 'localhost',
        passwd=settings.OTHER_DATABASES['nimsp']['DATABASE_PASSWORD'],
)
    nimsp_cur = nimsp_con.cursor()
except Exception, e:
    print "Unable to connect to %s database: %s" % (settings.OTHER_DATABASES['nimsp']['DATABASE_NAME'], e) 
    sys.exit(1)


try:
    util_con = psycopg2.connect("dbname='%s' user='%s' host='%s' password='%s'" % (
            settings.OTHER_DATABASES['util']['DATABASE_NAME'],
            settings.OTHER_DATABASES['util']['DATABASE_USER'],
            settings.OTHER_DATABASES['util']['DATABASE_HOST'] if 'DATABASE_HOST' in settings.OTHER_DATABASES['util'] else 'localhost',
            settings.OTHER_DATABASES['util']['DATABASE_PASSWORD'],
            ))
    util_cur = util_con.cursor()
except Exception, e:
    print "Unable to connect to %s database: %s" % (settings.OTHER_DATABASES['util']['DATABASE_NAME'], e) 
    sys.exit(1)

try:
    salt_con = psycopg2.connect("dbname='%s' user='%s' host='%s' password='%s'" % (
            settings.OTHER_DATABASES['salts']['DATABASE_NAME'],
            settings.OTHER_DATABASES['salts']['DATABASE_USER'],
            settings.OTHER_DATABASES['salts']['DATABASE_HOST'] if 'DATABASE_HOST' in settings.OTHER_DATABASES['salts'] else 'localhost',
            settings.OTHER_DATABASES['salts']['DATABASE_PASSWORD'],
            ))
    salt_cur = salt_con.cursor()
except Exception, e:
    print "Unable to connect to %s database: %s" % (settings.OTHER_DATABASES['salts']['DATABASE_NAME'], e) 
    sys.exit(1)


def random_name():
    global util_cur
    util_cur.execute("select random_firstname(), random_lastname()")
    (first,last) = util_cur.fetchone()
    if first is None or last is None:
        util_cur.execute("select random_firstname(), random_lastname()")
        (first,last) = util_cur.fetchone()       
    return (first,last)

total = 0
states = {}

nimsp_cur.execute("select c.State, count(*) as cnt from Contributions c, States s where c.State = s.StateCode group by State;")
for record in nimsp_cur.fetchall():
    states[record[0]] = record[1]
    total += record[1]

N = options.n - (2 * len(states.keys()))

for (state,cnt) in states.items():
    n = int(round((2.0 + (N * cnt / total)),0)) # 2 salts per state, then distributed by need
    if options.verbose:
        print "%s: %d %d" % (state, cnt, n)

    for i in range(n):
        r = random.random()
        util_cur.execute("select city,zip from locations where state = '%s' and cum_freq >= %f order by freq desc limit 1;" % (state,r))
        try:
            (city,zip) = util_cur.fetchone()
            (first,last) = random_name()
            contributor = last + ", " + first
            if options.verbose:
                print "  %s  %s %s, %s" % (contributor,city,state,zip)
            salt_cur.execute("insert into salts (contributor,city,state,zipcode) values (%s,%s,%s,%s);", (contributor,city,state,zip))
        except Exception, e:
            print e
    util_con.commit()
    nimsp_con.commit()
    salt_con.commit()

for o in (util_cur,util_con,nimsp_cur,nimsp_con,salt_cur,salt_con):
    try:
        o.close()
    except:
        pass
